============================= test session starts ==============================
platform linux -- Python 3.11.11, pytest-8.3.5, pluggy-1.5.0 -- /home/lhogeweg/miniconda3/envs/annflux2/bin/python
cachedir: .pytest_cache
rootdir: /home/lhogeweg/Documents/annflux_oe
configfile: pyproject.toml
plugins: cov-6.1.1
collecting ... collected 4 items

annflux/tests/test_cli.py::TestCli::test_cli START
Testing go command
successfully committed afe7a9ce82f5e2835df0dd66c47ec7e10e25bc294859d3592a9755cd
Initialized AnnFlux in folder /home/lhogeweg/annflux/data/bombus-plant-test/annflux
successfully committed 2c1493db681321643937047c65b5df403141e91fb56ca859085ff510
Testing train_then_features command
Train set size: 405
Val set size: 50
Sample input_ids shape  torch.Size([50, 5])
Sample attention_mask shape  torch.Size([50, 5])
Sample pixel_values shape  torch.Size([50, 3, 224, 224])
Sample caption shape  (50,)
trainable params: 983040 || all params: 24429057 || trainable%: 4.02
len(data_train) 405
Training complete in 0m 16s
perf 0.92
0.92
successfully committed 953e65ff33ffe87a4109a61d155f6d4b5c498cfbde1387296e2d1a96
successfully committed 3b09ad1c0a088998d115b0c0b6ef40f9dff1d17b94f8d8386c65fecc
END
PASSED
annflux/tests/test_server.py::test_index here
successfully committed afe7a9ce82f5e2835df0dd66c47ec7e10e25bc294859d3592a9755cd
Initialized AnnFlux in folder /home/lhogeweg/annflux/data/bombus-plant-test/annflux
successfully committed 2c1493db681321643937047c65b5df403141e91fb56ca859085ff510
INFO
logger=<RootLogger root (INFO)>
Using project_root=/home/lhogeweg/annflux/data/bombus-plant-test, images_path =/home/lhogeweg/annflux/data/bombus-plant-test/images
b'<!--\nCopyright 2025 Naturalis Biodiversity Center\n\nLicensed under the Apache License, Version 2.0 (the "License");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an "AS IS" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n-->\n<!DOCTYPE html>\n<script src="https://d3js.org/d3.v4.js"></script>\n<script\n  src="https://code.jquery.com/jquery-3.7.1.min.js"\n  integrity="sha256-/JqT3SQfawRcv/BIHPThkBvs0OEvtFFmqPF/lYI/Cxo="\n  crossorigin="anonymous"\n></script>\n<script src="https://cdn.jsdelivr.net/npm/underscore@1.13.7/underscore-umd-min.js"></script>\n<script\n  type="text/javascript"\n  src="https://golden-layout.com/files/latest/js/goldenlayout.min.js"\n></script>\n<script type="text/javascript" src="/static/annflux.js"></script>\n<script type="text/javascript" src="/static/annflux_layout.js"></script>\n<link\n  type="text/css"\n  rel="stylesheet"\n  href="https://golden-layout.com/files/latest/css/goldenlayout-base.css"\n/>\n<link\n  type="text/css"\n  rel="stylesheet"\n  href="https://golden-layout.com/files/latest/css/goldenlayout-dark-theme.css"\n/>\n<link type="text/css" rel="stylesheet" href="/static/annflux.css" />\n\n<body>\n  <div id="layoutContainer"></div>\n</body>\n<script>\n  let gLayout = "label"; // "label"\n  var myLayout;\n  // localStorage.clear();\n  savedState = localStorage.getItem("savedState");\n  savedLayout = localStorage.getItem("savedLayout");\n\n  if (savedState !== null && savedLayout == gLayout) {\n    logUI("Loading custom layout state");\n    myLayout = new GoldenLayout(JSON.parse(savedState));\n  } else {\n    let layoutDef = new Map([\n      ["partLabel", partLabelConfig],\n      ["label", labelConfig],\n    ]).get(gLayout);\n    console.log("layoutDef", layoutDef);\n    myLayout = new GoldenLayout(layoutDef);\n  }\n\n  localStorage.setItem("savedLayout", gLayout);\n\n  function closeFullscreen() {}\n\n  // myLayout = new GoldenLayout(labelConfig);\n  let mapContainer = null;\n  let labelContainer = null;\n  let galleryContainer = null;\n  let fullImageContainer = null;\n  let controlContainer = null;\n\n  function saveState() {\n    var state = JSON.stringify(myLayout.toConfig());\n    localStorage.setItem("savedState", state);\n    location.reload();\n  }\n\n  function persistentToggle(elID) {\n    $(`#${elID}`).toggle();\n    localStorage.setItem(`${elID}_display`, $(`#${elID}`).css("display"));\n  }\n\n  myLayout.registerComponent("Map", function (container, componentState) {\n    if (componentState.label == "A") {\n      container.getElement().html(mapHtml);\n      mapContainer = container;\n    }\n  });\n  myLayout.registerComponent("Labels", function (container, componentState) {\n    if (componentState.label == "B") {\n      labelContainer = container;\n      container.getElement().html(`<div id="panel">\n      <span id="labelPanel"><b style="color: red">Add labels first!</b></span>\n      <br/><a class="noButton" href="#" onclick="persistentToggle(\'addLabelPanel\')"><img src="/static/newlabel.svg" width="24px"></a>\n      <div id="addLabelPanel">\n        <a href="javascript:void(0)" onclick="setLabelParent(null)">+</a>\n        <input type="text" id="newLabel" /><-<input\n          type="text"\n          id="parentLabel"\n          value="null"\n        />\n        <input type="button" value="add" onclick="addLabel()" />\n        <a href="/exclusivity">Exclusivity</a>\n        <a href="/label_provider">Label provider</a>\n      </div>\n    </div>`);\n    }\n  });\n  myLayout.registerComponent("Gallery", function (container, componentState) {\n    if (componentState.label == "C") {\n      galleryContainer = container;\n      container.getElement()\n        .html(`<div id="gallery" tabindex="0" style="position:relative">\n    <div id="fullscreen" style="position: absolute; max-width: 50%; display:none">\n      <img src="" style="max-width: 100%" />\n      <a href="#" onclick="$(\'#fullscreen\').hide();">x</a>\n    </div>\n      <a href="#" onclick="submitLabeledGallery(this)"\n        >Save all labels/images</a\n      >\n      <a href="#" onclick="refresh(this)">Refresh</a>\n      <a href="#" onclick="deselectGallery(this)">Deselect</a>\n      <a href="#" onclick="highlightGalleryInMap(this)">Highlight gallery</a>\n    </div>\n    `);\n    }\n  });\n  myLayout.registerComponent("Control", function (container, componentState) {\n    if (componentState.label == "D") {\n      controlContainer = container;\n      container.getElement().html(controlHtml);\n    }\n  });\n  myLayout.registerComponent("FullImage", function (container, componentState) {\n    if (componentState.label == "E") {\n      fullImageContainer = container;\n      container\n        .getElement()\n        .html(\n          `<div id="fullImageWrapper" class="img-overlay-wrap"><img src=\'something\' id="fullImage"/></div>`\n        );\n    }\n  });\n\n  myLayout.init();\n\n  let gLabeled = new Map();\n  let selection = [];\n  let gallerySelection = [];\n  let zoom = null;\n  let x = null;\n  let y = null;\n  let time_x = null;\n  let time_y = null;\n  let svg = null;\n  let g = null;\n  let width = null;\n  let height = null;\n  let dots = null;\n  let lastZoomUpdate = new Date().getTime() / 1000;\n  let numUpdatesActive = 0;\n  let data = null;\n  let gallery = null;\n  let galleryImages = null;\n  let shortcuts = new Map();\n  let g_labels = []; // list of (child, parent) names\n  var idleTime = 0;\n  // localStorage.setItem("activeTime", 0);\n  var activeTime = parseInt(localStorage.getItem("activeTime") ?? 0);\n  let trained_for_version = null;\n  const exclusivity = new Map();\n  const childToParent = new Map();\n\n  function addSpaces() {\n    d3.selectAll(".quick_label").each(function () {\n      var t = document.createElement("span");\n      t.innerHTML = " ";\n      this.parentNode.insertBefore(t, this.nextSibling);\n    });\n    d3.selectAll(".quick_label_true").each(function () {\n      var t = document.createElement("span");\n      t.innerHTML = " ";\n      this.parentNode.insertBefore(t, this.nextSibling);\n    });\n    d3.selectAll(".quick_label_predicted").each(function () {\n      var t = document.createElement("span");\n      t.innerHTML = " ";\n      this.parentNode.insertBefore(t, this.nextSibling);\n    });\n  }\n\n  function createQuickLabel(imageId, class_, labels, bla) {\n    d3.select("div#gallery-label-" + imageId)\n      .selectAll("*")\n      .remove();\n    if (bla) {\n      d3.select("div#gallery-label-" + imageId)\n        .selectAll("a")\n        .data(labels)\n        .enter()\n        .append("a")\n        .html(function (d) {\n          return `${d}`;\n        })\n        .attr("class", class_)\n        .attr("onclick", function (d) {\n          return `labelInGallery(\'${imageId}\', \'${d}\', false)`;\n        })\n        .attr("href", `javascript:void(0)`);\n    }\n    addSpaces();\n  }\n\n  function drawGallery(show_data) {\n    const as_ranking_column = urlParams.get("as_ranking_column");\n    //show_data.sort((a, b) => a.score_predicted - b.score_predicted);\n    const rank_modifier = urlParams.get("invert_ranking") == "on" ? -1 : +1;\n    console.log("drawGallery", as_ranking_column, rank_modifier);\n    show_data = show_data.sort(\n      (a, b) => rank_modifier * (a[as_ranking_column] - b[as_ranking_column])\n    );\n    console.log("drawGallery", show_data);\n    gallery.selectAll("div.gallery").remove();\n    let galleryImageWidth = "300px";\n    galleryImages = gallery\n      .selectAll("gallery_images")\n      .data(show_data)\n      .enter()\n      .append("div")\n      .attr("class", "gallery")\n      .attr("id", function (d) {\n        return "gallery-" + d.uid;\n      })\n      .style("display", "inline-block")\n      .style("width", galleryImageWidth)\n\n      .append("img")\n      .attr("title", function (d) {\n        return (\n          d.labeled +\n          " " +\n          Math.round(d.score_predicted * 100, 0) +\n          " " +\n          Math.round(d.score_true * 100, 0)\n        );\n      })\n      .attr("src", function (d) {\n        return "/images/thumbnail/" + d.uid;\n      })\n      .attr("width", galleryImageWidth);\n    d3.selectAll("div.gallery img").on("click", selectImageGallery);\n    d3.selectAll("div.gallery img").on("dblclick", altImageAction);\n    // create container for gallery labels\n    galleryImages.each((d, i) => {\n      d3.select("div#gallery-" + d.uid)\n        .append("div")\n        .attr("id", "gallery-label-" + d.uid)\n        .attr("class", "gallery-label")\n        .attr("data-id", d.uid)\n        .attr("data", d.labeled == 0 ? d.label_predicted : d.label_true);\n    });\n    // create per image (quick) labels\n    let labelsFromStorage = null;\n    if (localStorage.getItem("labeled")) {\n      labelsFromStorage = JSON.parse(localStorage.getItem("labeled"));\n      logUI("Restored labeled from local storage", 1);\n    }\n\n    galleryImages.each((d2, i) => {\n      let labelsFor = (\n        d2.labeled == 0 ? d2.label_predicted : d2.label_true\n      ).split(",");\n      if (labelsFromStorage && d2.uid in labelsFromStorage) {\n        labelsFor = labelsFromStorage[d2.uid].split(",");\n      }\n      createQuickLabel(\n        d2.uid,\n        d2.labeled == 0 ? "quick_label_predicted" : "quick_label_true",\n        labelsFor,\n        true\n      );\n    });\n    // button for removing all labels\n    galleryImages.each((d, i) => {\n      d3.select("div#gallery-" + d.uid)\n        .append("a")\n        .attr("href", "javascript:void(0)")\n        .attr("onclick", "clearLabelInGallery(this)")\n        .attr("data-id", d.uid)\n        .html("x");\n    });\n    // ?\n    galleryImages.each((d, i) => {\n      d3.select("div#gallery-" + d.uid)\n        .append("div")\n        // .attr("max-width", "200px")\n        // .style("flex-basis", "200px")\n        .attr("id", "labels-" + d.uid);\n    });\n    console.log("galleryImages.node().label_possible");\n    // predicted (possible) labels\n    try {\n      galleryImages.each((d2, i) => {\n        d3.select("div#labels-" + d2.uid)\n          .selectAll("a")\n          .data(zip(d2.label_possible.split(","), d2.score_possible.split(",")))\n          .enter()\n          .append("a")\n          .html(function (d) {\n            return `${d[0]}(${d[1]})`;\n          })\n          .attr("class", "quick_label")\n          .attr("onclick", function (d) {\n            return `labelInGallery(\'${d2.uid}\', \'${d[0]}\', false, event)`;\n          })\n\n          .attr("href", `javascript:void(0)`);\n      });\n    } catch (error) {}\n    // }\n\n    addSpaces();\n\n    gallerySelection = [];\n  }\n\n  function zip(a, b) {\n    return a.map(function (e, i) {\n      return [e, b[i]];\n    });\n  }\n\n  function toggleMapImageDisplay() {\n    d3.selectAll("image").style("visibility", "hidden");\n    console.log(d3.selectAll("image").style("visibility"));\n  }\n\n  function selectImage(event) {\n    let image = d3.select("image#map-" + event.uid);\n    if (!selection.includes(event.uid)) {\n      image.style("outline", "1px solid red");\n      selection.push(event.uid);\n    } else {\n      image.style("outline", "");\n      let new_selection = [];\n      for (const x of selection) {\n        if (x != event.uid) {\n          new_selection.push(x);\n        }\n      }\n      selection = new_selection;\n    }\n    console.log("map selection", selection);\n    //\n    let show_data = [];\n    for (const d of data) {\n      if (selection.includes(d.uid)) {\n        show_data.push(d);\n      }\n    }\n    drawGallery(show_data);\n  }\n\n  function selectImageGallery(event) {\n    let imageBox = d3.select("div.gallery#gallery-" + event.uid);\n    if (d3.event.shiftKey) {\n      // multiple select\n      if (!gallerySelection.includes(event.uid)) {\n        imageBox.style("outline", "1px solid red");\n        gallerySelection.push(event.uid);\n      } else {\n        imageBox.style("outline", "");\n        let new_selection = [];\n        for (const x of gallerySelection) {\n          if (x != event.uid) {\n            new_selection.push(x);\n          }\n        }\n        gallerySelection = new_selection;\n      }\n    } else {\n      // single select\n      const selected = gallerySelection.includes(event.uid);\n      if (gallerySelection.length > 0) {\n        deselectGallery();\n      }\n      if (!selected) {\n        imageBox.style("outline", "1px solid red");\n        gallerySelection.push(event.uid);\n      } else {\n        imageBox.style("outline", "");\n        gallerySelection = [];\n      }\n      //\n      if (gLayout == "partLabel") {\n        showFullImage(event.uid);\n      }\n    }\n    // $("#fullscreen img").attr("src", "/images/thumbnail/" + event.uid);\n    // $("#fullscreen").show()\n    console.log("gallerySelection", gallerySelection);\n    // $("#individualImage").attr("src", "/images/thumbnail/" + event.uid);\n    // $("#individualPredictedLabel").html(event.label_predicted);\n    // $("#individualPredictedProbability").html(event.score_predicted);\n    // $("#individualId").html(event.uid);\n    //\n    $(".label_panel").css("font-weight", "");\n    for (const uid of gallerySelection) {\n      let labelString = d3.select("#gallery-label-" + uid).attr("data");\n      if (labelString == "n/a") {\n        labelString = "";\n      }\n      const labels = labelString.split(",");\n      for (const label of labels) {\n        $(".label_panel:contains(\'" + label + "\')").css("font-weight", "bold");\n      }\n    }\n    //\n    if (d3.event.ctrlKey) {\n      let dot = d3.select("#dot-" + event.uid);\n      x_ = x(event.e_0);\n      y_ = y(event.e_1);\n      // dot.transition().duration(500).style("fill", "blue").transition().duration(500).style("fill", "red");\n      // dot\n      //   .transition()\n      //   .duration(500)\n      //   .attr("r", 20)\n      //   .transition()\n      //   .duration(500)\n      //   .attr("r", 3);\n\n      const trans = d3.zoomIdentity\n        .translate(width / 2, height / 2)\n        .scale(30)\n        .translate(-x_, -y_);\n      console.log("trans", trans);\n      svg\n        // .select("g")\n        // .transition()\n        // .duration(750)\n        .call(\n          zoom.transform,\n          trans\n          // d3.pointer(event)\n        );\n      // d3.select("svg g").attr("transform", trans);\n      console.log(\n        "foekoe",\n        d3.zoomTransform(svg.select("g")),\n        d3.zoomTransform(svg),\n        d3.zoomTransform(zoom)\n      );\n    }\n  }\n\n  function labelInMap(el) {\n    selection.forEach((x, i) => gLabeled.set(x, el.innerText));\n    $("/label", JSON.stringify(Object.fromEntries(gLabeled)));\n    console.log("label - selection", selection);\n    for (const x of selection) {\n      d3.select("image#" + x).style("display", "none");\n    }\n    selection = [];\n    console.log(gLabeled);\n  }\n\n  function playMedia(event) {\n    console.log(`/sounds/${event.uid}`);\n    selectImageGallery(event);\n    var audio = new Audio(`/sounds/${event.uid}`);\n    audio.play();\n  }\n\n  function altImageAction(event) {\n    //TODO: re-add sound\n    const img = $(`#gallery-${event.uid} img`);\n    let curLayer = img.attr("data-curLayer");\n    console.log("img", img, curLayer);\n    if (curLayer === undefined || curLayer == "masked") {\n      curLayer = "original";\n      img.attr("src", `/images/original/thumbnail/${event.uid}`);\n    } else if (curLayer == "original") {\n      curLayer = "mask";\n      img.attr("src", `/images/mask/thumbnail/${event.uid}`);\n    } else if (curLayer == "mask") {\n      curLayer = "masked";\n      img.attr("src", `/images/thumbnail/${event.uid}`);\n    }\n    img.attr("data-curLayer", curLayer);\n    selectImageGallery(event);\n  }\n\n  function showFullImage(uid) {\n    let fullImageId = "";\n    const tokens = uid.split("_");\n    for (let i = 0; i < tokens.length - 1; i++) {\n      fullImageId += tokens[i];\n      if (i < tokens.length - 2) {\n        fullImageId += "_";\n      }\n    }\n    $("#fullImage").attr("src", `/images/full/${fullImageId}`);\n  }\n\n  function labelInGallery(uid, selectedLabel, multipleSelected, event) {\n    let labelString = d3.select("#gallery-label-" + uid).attr("data");\n    if (labelString == "n/a") {\n      labelString = "";\n    }\n    if (event === undefined) {\n      undetermined = false;\n    } else {\n      undetermined = event.ctrlKey;\n    }\n    const labels = labelString.split(",");\n    console.log(labels);\n    if (labels.includes(selectedLabel)) {\n      if (!multipleSelected) {\n        // remove label\n        labelString = "";\n        for (const label2 of labels) {\n          if (label2 != selectedLabel && label2 != "n/a") {\n            labelString += (labelString.length > 0 ? "," : "") + label2;\n          }\n        }\n      }\n      // TODO: remove child when parent is removed\n    } else {\n      let newLabels = [];\n      for (const label2 of labels) {\n        let removedLabel = null;\n        if (exclusivity.has(selectedLabel)) {\n          if (\n            !(\n              exclusivity.get(selectedLabel).indexOf(label2) > -1 ||\n              exclusivity.get(selectedLabel) == "*"\n            )\n          ) {\n            newLabels.push(label2);\n          } else {\n            removedLabel = label2;\n          }\n        } else if (exclusivity.has("*")) {\n          if (exclusivity.get("*") != label2) {\n            newLabels.push(label2);\n          } else {\n            removedLabel = label2;\n          }\n        } else {\n          newLabels.push(label2);\n        }\n      }\n      newLabels.push(!undetermined ? selectedLabel : selectedLabel + "=?");\n      // add ancestors for child\n      let childLabel = selectedLabel;\n      while (childToParent.has(childLabel)) {\n        let parentLabel = childToParent.get(childLabel);\n        if (!labels.includes(parentLabel)) {\n          newLabels.push(parentLabel);\n        }\n        childLabel = parentLabel;\n      }\n      //\n      labelString = "";\n      for (const label2 of newLabels) {\n        labelString += (labelString.length > 0 ? "," : "") + label2;\n      }\n    }\n    console.log("labelString", labelString);\n    d3.select("#gallery-label-" + uid).attr("data", labelString);\n    d2 = d3.select("#gallery-" + uid).data()[0];\n    createQuickLabel(\n      d2.uid,\n      d2.labeled == 0 ? "quick_label_predicted" : "quick_label_true",\n      labelString.length > 0 ? labelString.split(",") : [],\n      true\n    );\n    //\n    setLabeledGlobal();\n    console.log(gLabeled);\n    console.log("here", JSON.stringify(Object.fromEntries(gLabeled)));\n    localStorage.setItem(\n      "labeled",\n      JSON.stringify(Object.fromEntries(gLabeled))\n    );\n    // $("#ui_log_last").html("Stored labeled in local storage");\n    logUI("Stored labeled in local storage");\n  }\n\n  function logUI(message, logLevel) {\n    if (logLevel === undefined) {\n      logLevel = 0;\n    }\n    $("#ui_log_last").html(message);\n    $("#ui_log_last").css("color", logLevel == 0 ? "white" : "orange");\n  }\n\n  function massLabelInGallery(label, multipleSelected) {\n    console.log("massLabelInGallery - selection", gallerySelection);\n    // const label = el.innerText;\n    for (const uid of gallerySelection) {\n      labelInGallery(uid, label, multipleSelected);\n      // d3.select("div.gallery#gallery-" + uid).style("outline", "");\n    }\n\n    // gallerySelection = [];\n    console.log(gallerySelection);\n  }\n\n  function labelDelegate(el) {\n    if (selection.length > 0 && false) {\n      labelInMap(el);\n    } else if (gallerySelection.length > 0) {\n      massLabelInGallery(el.innerText, gallerySelection.length > 1);\n    } else {\n      //d3.selectAll(".gallery-label").html(el.innerText);\n    }\n  }\n\n  function setLabeledGlobal() {\n    /*\n        Stores the current labels for the gallery in the global `gLabeled` variable\n        */\n    d3.selectAll(".gallery-label").each((x, i) => {\n      const label = $("#gallery-label-" + x.uid).attr("data");\n      gLabeled.set(x.uid, label);\n    });\n    console.log("labeled", gLabeled);\n  }\n\n  function shardFlux(force) {\n    /*\n    RELOAD=YES\n    */\n    if (urlParams.get("flux_mode") == "active_learning_shard") {\n      const label_predicted_url = urlParams.get("label_predicted");\n      if (\n        label_predicted_url == null ||\n        label_predicted_url === undefined ||\n        force\n      ) {\n        const min_ = 100; //TODO\n        let shards = new Array();\n        d3.csv("/detailed_performance/data", function (data_) {\n          console.log("detailed_performance", data_);\n          let total = 0;\n          for (row of data_) {\n            row.num_predicted =\n              parseInt(row.num_predicted_certain) +\n              parseInt(row.num_predicted_uncertain);\n            total += row.num_predicted;\n          }\n          const max_ = 0.1 * total;\n          for (row of data_) {\n            console.log(min_, row.num_predicted, max_);\n            if ((row.num_predicted >= min_) & (row.num_predicted <= max_)) {\n              shards.push(row);\n            }\n          }\n          // random sample, TODO proper\n          shards = _.shuffle(shards);\n          for (const row of shards) {\n            if (parseFloat(row.precision) < Math.random()) {\n              // alert(row.label);\n              $("#label_predicted").val(row.label.toLowerCase());\n              changeOption(document.getElementById("label_predicted"));\n              break;\n            }\n          }\n\n          console.log("total", total, "shards", shards);\n        });\n      }\n    }\n  }\n\n  function submitLabeledGallery() {\n    $("#loading_circle").toggle();\n    setLabeledGlobal();\n    console.log(JSON.stringify(Object.fromEntries(gLabeled)));\n    $.post("/label", JSON.stringify(Object.fromEntries(gLabeled)))\n      .done(function (data) {\n        localStorage.removeItem("labeled");\n        shardFlux(true);\n        location.reload();\n      })\n      .fail(function (e) {\n        alert(\n          "Failed to save labels, please contact laurens.hogeweg@naturalis.nl"\n        );\n      });\n  }\n\n  function refresh() {\n    $("#loading_circle").toggle();\n    $.post("/label", JSON.stringify(Object.fromEntries(new Map())))\n      .done(function (data) {\n        location.reload();\n      })\n      .fail(function (e) {\n        alert(\n          "Failed to save labels, please contact laurens.hogeweg@naturalis.nl"\n        );\n      });\n  }\n\n  let urlOptions = new Map();\n  const options = [\n    "label_predicted",\n    "label_true",\n    "label_undetermined",\n    "as_ranking_column",\n    "show_labeled",\n    "color_map",\n    "not_label_true",\n    "not_label_predicted",\n    "invert_ranking",\n    "num_in_gallery",\n    "ignore_double_checked",\n    "linear_auto_train",\n    "flux_mode",\n  ];\n  const urlParams = new URLSearchParams(window.location.search);\n\n  $(document).ready(function () {\n    $.get("/performance", function (data) {\n      renderPerformance(data);\n    });\n    $.get("/label_defs", function (data) {\n      g_labels = data["labels"];\n\n      for (const label of g_labels) {\n        if (label[1] != "null") {\n          childToParent.set(label[0], label[1]);\n        }\n      }\n      console.log(childToParent);\n      const parentToChildren = invertMap(childToParent);\n      console.log("invertMap", parentToChildren);\n\n      //\n      d3.csv("/exclusivity/data", function (data) {\n        data.forEach(function (x, i) {\n          if (!exclusivity.get(x.left)) {\n            exclusivity.set(x.left, []);\n          }\n          exclusivity.get(x.left).push(x.right);\n          //\n          if (!exclusivity.get(x.right)) {\n            exclusivity.set(x.right, []);\n          }\n          exclusivity.get(x.right).push(x.left);\n        });\n        console.log("exclusivity", exclusivity);\n        //\n        for (const [left, right] of exclusivity) {\n          excludeDescendants(left, right, parentToChildren, exclusivity);\n        }\n        console.log("exclusivity", exclusivity);\n      });\n      //\n\n      for (const label of g_labels) {\n        for (const char of label[0].toLocaleLowerCase()) {\n          if (\n            !shortcuts.has(char) &&\n            char != " " \n            // && char != "d" \n            // && char != "i"\n          ) {\n            shortcuts.set(char, label[0]);\n            break;\n          }\n        }\n      }\n      const labelToShortcuts = new Map(\n        Array.from(shortcuts, (a) => a.reverse())\n      );\n      console.log(shortcuts);\n\n      if (g_labels.length > 0) {\n        d3.select("#labelPanel").selectAll("*").remove();\n      }\n\n      d3.select("#labelPanel")\n        .selectAll("a")\n        .data(g_labels)\n        .enter()\n        .append("a")\n        .attr("onclick", "labelDelegate(this)")\n        .attr("href", "javascript:void(0)")\n        .attr("title", function (d) {\n          return labelToShortcuts.get(d[0]);\n        })\n        .attr("class", "label_panel")\n        .attr("id", function (d) {\n          return `label_panel_${d[0].replace(" ", "_")}`;\n        })\n        .html(function (d) {\n          return d[0];\n        });\n\n      //\n      d3.selectAll("#labelPanel a").each(function (d) {\n        var t = document.createElement("span");\n        t.innerHTML =\n          "<a href=\'javascript:void(0)\' onclick=\'setLabelParent(\\"" +\n          d[0] +\n          "\\")\'>+</a> ";\n        this.parentNode.insertBefore(t, this.nextSibling);\n      });\n      //\n      console.log(g_labels);\n      let no_sys_labels = g_labels.filter(\n        (label_) => label_[0].indexOf("sys:") == -1\n      );\n      console.log(no_sys_labels);\n      //\n      d3.select("#label_predicted")\n        .selectAll("option")\n        .data(no_sys_labels)\n        .enter()\n        .append("option")\n        .attr("value", (d) => d[0].toLowerCase())\n        .html((d) => d[0]);\n      d3.select("#label_predicted")\n        .insert("option", ":first-child")\n        .html("--none--")\n        .attr("selected", "selected")\n        .attr("value", "null");\n      //\n      d3.select("#label_true")\n        .selectAll("option")\n        .data(g_labels)\n        .enter()\n        .append("option")\n        .attr("value", (d) => d[0].toLowerCase())\n        .html((d) => d[0]);\n      d3.select("#label_true")\n        .insert("option", ":first-child")\n        .html("--none--")\n        .attr("selected", "selected")\n        .attr("value", "null");\n      //\n      d3.select("#label_undetermined")\n        .selectAll("option")\n        .data(g_labels)\n        .enter()\n        .append("option")\n        .attr("value", (d) => d[0].toLowerCase())\n        .html((d) => d[0]);\n      d3.select("#label_undetermined")\n        .insert("option", ":first-child")\n        .html("--none--")\n        .attr("selected", "selected")\n        .attr("value", "null");\n      //\n      for (const option of options) {\n        const optionValFromUrl = urlParams.get(option);\n        if (optionValFromUrl) {\n          if (optionValFromUrl == "on") {\n            $("#" + option).attr("checked", true);\n          } else {\n            $("#" + option).val(optionValFromUrl);\n          }\n          urlOptions.set(option, optionValFromUrl);\n        }\n      }\n      //\n      shardFlux();\n      //\n      $("#gallery img").on("load", function () {\n        let height = $(this).height();\n        let width = $(this).width();\n        if (height / width > 1.0) {\n          $(this).height(1.0 * $(this).width());\n          $(this).width($(this).width() * (1.0 / (height / width)));\n        }\n      });\n      $("#fullImage").on("load", function () {\n        var rectsize = 100;\n        const svgContainer = $("#fullImageWrapper");\n        var svg = d3\n          .select("#fullImageWrapper")\n          .append("svg")\n          .attr("height", rectsize * 10)\n          .attr("width", rectsize * 10);\n\n        // var rectangle = svg\n        //   .append("rect")\n        //   .attr("x", 150)\n        //   .attr("y", 50)\n        //   .attr("width", 50)\n        //   .attr("height", 140);\n\n        $("#fullImage").attr("z-index", 100);\n      });\n    });\n\n    let typingTimer; // Timer identifier\n    let typedText = "";\n    const doneTypingInterval = 200; // Time in ms (200 ms)\n\n    $("#gallery").on("keydown", function () {\n      clearTimeout(typingTimer);\n    });\n\n    // User is "finished typing," do something\n    function doneTyping() {\n      logUI(typedText.lengt);\n      if (typedText.length == 1) {\n        const key = typedText.toLowerCase()[0];\n        if (shortcuts.has(key)) {\n          massLabelInGallery(shortcuts.get(key));\n          typedText = "";\n        }\n        return;\n      }\n      let matchedLabels = new Array();\n      g_labels.forEach((val, _) => {\n        if (val[0].toLowerCase().indexOf(typedText.toLowerCase()) > -1) {\n          matchedLabels.push(val[0]);\n        }\n      });\n      addQuickLabel(gallerySelection[0], matchedLabels);\n      typedText = "";\n    }\n\n    function addQuickLabel(uid, possible_labels) {\n      const d3El = d3.select("div#labels-" + uid);\n      console.log(\n        "addQuickLabel",\n        uid,\n        possible_labels,\n        d3.select("div#labels-" + uid)\n      );\n      const numExisting = d3El.selectAll("a").length;\n      const labelData = zip(\n        new Array(numExisting).fill(""),\n        new Array(numExisting).fill(0)\n      ).concat(\n        zip(possible_labels, new Array(possible_labels.length).fill(0.0))\n      );\n      console.log(labelData);\n      d3El\n        .selectAll("a")\n        .data(labelData)\n        .enter()\n        .append("a")\n        .html(function (d) {\n          return `${d[0]}(${d[1]})`;\n        })\n        .attr("class", "quick_label")\n        .attr("onclick", function (d) {\n          return `labelInGallery(\'${uid}\', \'${d[0]}\', false, event)`;\n        })\n\n        .attr("href", `javascript:void(0)`);\n    }\n\n    //\n    $("#gallery").on("keyup", function (eventData) {\n      const key = eventData.originalEvent.key;\n      // if (key == "d" & false) { // TODO: add shift\n      //   deselectGallery();\n      // } else if (key == "i" & false) { // TODO: add shift\n      //   toggleMapImageDisplay();\n      // } else if (shortcuts.has(key)) {\n      //   massLabelInGallery(shortcuts.get(key));\n      // }\n\n      typedText += String.fromCharCode(eventData.which);\n      $("#typingDiv").text(typedText);\n\n      // Clear the existing timer\n      clearTimeout(typingTimer);\n\n      // Set a new timer\n      typingTimer = setTimeout(doneTyping, doneTypingInterval);\n    });\n\n    $("#my_dataviz").on("keypress", function (eventData) {\n      const key = eventData.originalEvent.key;\n      if (key == "d") {\n        //deselectGallery();\n      } else if (key == "i") {\n        toggleMapImageDisplay();\n      }\n    });\n\n    //\n    $.fn.center = function () {\n      this.css("position", "fixed");\n      // this.css("top", $(window).height() / 2 - this.height() / 2 + "px");\n      this.css("top", 100 + "px");\n      // this.css("left", $(window).width() / 2 - this.width() / 2 + "px");\n      this.css("left", 100 + "px");\n      return this;\n    };\n    // $("#fullscreen").center();\n    $("#help").center();\n    //\n    $.post("/status", JSON.stringify({ idleTime: idleTime }))\n      .done(function (data) {\n        $("#status").attr("title", JSON.stringify(data, null, " "));\n        $("#status").html(data["status"]);\n        $("#progress").css(\n          "width",\n          Math.min(100, (1 - data["duration_perc"]) * 100) + "%"\n        );\n        trained_for_version = data["trained_for_version"];\n      })\n      .fail(function (e) {\n        alert("Failed to get status, is the backend running?");\n      });\n    // Increment the idle time counter every minute.\n    var idleInterval = setInterval(statusPoll, 1000);\n\n    // Zero the idle timer on mouse movement.\n    $(this).mousemove(function (e) {\n      activeTime += idleTime * 1;\n      localStorage.setItem("activeTime", activeTime);\n      idleTime = 0;\n    });\n    $(this).keypress(function (e) {\n      activeTime += idleTime * 1;\n      localStorage.setItem("activeTime", activeTime);\n      idleTime = 0;\n    });\n\n    $("#addLabelPanel").css(\n      "display",\n      localStorage.getItem(`addLabelPanel_display`)\n    );\n    $("#view_config").css(\n      "display",\n      localStorage.getItem(`view_config_display`)\n    );\n  });\n\n  function formatTimeWithSuperscript(seconds) {\n    let hrs = Math.floor(seconds / 3600);\n    let mins = Math.floor((seconds % 3600) / 60);\n    let secs = seconds % 60;\n\n    return (\n      `${String(hrs).padStart(2, "0")}\xca\xb0 : ` +\n      `${String(mins).padStart(2, "0")}\xe1\xb5\x90 : ` +\n      `${String(secs).padStart(2, "0")}\xcb\xa2`\n    );\n  }\n\n  function statusPoll(forceIdleTime) {\n    // if (urlParams.get("linear_auto_train") == "on") {\n    idleTime++;\n    // logUI(`idleTime = ${idleTime}`);\n    // }\n    const idleTimeForPost =\n      forceIdleTime !== undefined ? forceIdleTime : idleTime;\n    $.post("/status", JSON.stringify({ idleTime: idleTimeForPost * 1 })).done(\n      function (data) {\n        $("#status").attr("title", JSON.stringify(data, null, " "));\n        $("#status").html(data["status"]);\n        $("#progress").css(\n          "width",\n          Math.min(100, (1 - data["duration_perc"]) * 100) + "%"\n        );\n        // console.log(trained_for_version, data["trained_for_version"]);\n        if (\n          trained_for_version != data["trained_for_version"] &&\n          data["trained_for_version"] != null\n        ) {\n          location.reload();\n        }\n        trained_for_version = data["trained_for_version"];\n        // alert(data["package_version"]);\n        $("#package_version").html(data["package_version"]["version"]);\n        // speed\n        // console.log("activeTime", activeTime)\n        $("#speed_active_time").html(formatTimeWithSuperscript(activeTime));\n        $("#speed_annotation").html(\n          Math.round((data["num_labeled"] / (activeTime / 3600)) * 10) / 10\n        );\n        $("#speed_certain").html(\n          Math.round(data["num_unlabeled_certain"] / (activeTime / 3600), 1)\n        );\n      }\n    );\n  }\n\n  function changeOption(el) {\n    /*\n\n    RELOAD=YES\n    */\n    console.log(el.value, el.id);\n    urlOptions.set(\n      el.id,\n      el.value == "on" ? $("#" + el.id + ":checked").val() : el.value\n    );\n    if (["label_undetermined", "label_true"].indexOf(el.id) > -1) {\n      urlOptions.set("show_labeled", "labeled");\n    }\n    if (el.value.indexOf("sys:") > -1) {\n      urlOptions.set("ignore_double_checked", "on");\n    }\n    let url = "/annflux?";\n    //window.location.href = "/annflux?" +\n    for (const [key, value] of urlOptions) {\n      if (value && value != "null") {\n        url += `&${key}=${value}`;\n      }\n    }\n    window.location.href = url;\n  }\n\n  function clearLabelInGallery(el) {\n    const uid = $(el).attr("data-id");\n    $("#gallery-label-" + uid).attr("data", "");\n    d2 = d3.select("#gallery-" + uid).data()[0];\n    createQuickLabel(\n      d2.uid,\n      d2.labeled == 0 ? "quick_label_predicted" : "quick_label_true",\n      [],\n      true\n    );\n  }\n\n  function deselectGallery() {\n    if (gallerySelection.length > 0) {\n      for (const uid of gallerySelection) {\n        d3.select("div.gallery#gallery-" + uid).style("outline", "");\n      }\n      gallerySelection = [];\n    } else {\n      console.log(galleryImages);\n      galleryImages.each(function (d, i) {\n        d3.select("div.gallery#gallery-" + d.uid).style(\n          "outline",\n          "1px solid red"\n        );\n        gallerySelection.push(d.uid);\n      });\n    }\n    console.log("gallerySelection", gallerySelection);\n  }\n\n  function forceLinearTrain() {\n    $("#loading_circle").toggle();\n    statusPoll(150);\n  }\n\n  function highlightGalleryInMap() {\n    galleryImages.each((d, i) => {\n      console.log(d.uid);\n      let dot = d3.select("#dot-" + d.uid);\n\n      dot\n        .transition()\n        .duration(500)\n        .style("fill", "blue")\n        .transition()\n        .duration(500)\n        .style("fill", "red");\n      dot\n        .transition()\n        .duration(500)\n        .attr("r", 20)\n        .transition()\n        .duration(500)\n        .attr("r", 3);\n    });\n  }\n\n  function setFlash(elementId) {\n    console.log("setFlash", elementId);\n    localStorage.setItem("flashAtLoad", elementId.toString());\n  }\n\n  function flashElements() {\n    if (localStorage.getItem("flashAtLoad")) {\n      console.log("flashElements", localStorage.getItem("flashAtLoad"));\n      $(localStorage.getItem("flashAtLoad"))\n        .fadeOut(100)\n        .fadeIn(100)\n        .fadeOut(100)\n        .fadeIn(100);\n    }\n  }\n\n  function addLabel(parent) {\n    const newLabel = $("#newLabel").val();\n    setFlash(`#label_panel_${newLabel.replace(" ", "_")}`);\n    $.ajax({\n      url: "/label_defs",\n      type: "PUT",\n      success: function (response) {\n        location.reload();\n      },\n      data: JSON.stringify([newLabel, $("#parentLabel").val()]),\n    });\n  }\n\n  function setLabelParent(val) {\n    $("#parentLabel").val(val);\n  }\n</script>\n\n<script type="module">\n  myLayout.on("initialised", function () {\n    for (var container of [\n      mapContainer,\n      labelContainer,\n      galleryContainer,\n      fullImageContainer,\n      controlContainer,\n    ]) {\n      if (container) {\n        container.on("resize", saveState);\n      }\n    }\n\n    // set the dimensions and margins of the graph\n    var margin = { top: 0, right: 30, bottom: 30, left: 0 };\n    width = mapContainer.width;\n    height = mapContainer.height;\n    x = d3.scaleLinear().domain([-20, 20]).range([0, width]);\n    y = d3.scaleLinear().domain([-20, 20]).range([height, 0]);\n    time_x = d3.scaleLinear().domain([0, 900]).range([0, width]);\n    time_y = d3.scaleLinear().domain([-20, 20]).range([height, 0]);\n\n    console.log(width, height);\n    let prevTransform = Object();\n    prevTransform.k = 1;\n    prevTransform.x = 0;\n    prevTransform.y = 0;\n    let zooming = false;\n    let transform = null;\n    const color_by = urlParams.get("color_map");\n\n    // append the svg object to the body of the page\n    svg = d3\n      .select("#my_dataviz")\n      .append("svg")\n      .attr("width", width + margin.left + margin.right)\n      .attr("height", height + margin.top + margin.bottom);\n    g = svg\n      .append("g")\n      .attr("transform", "translate(" + margin.left + "," + margin.top + ")");\n\n    gallery = d3.select("#gallery").append("div");\n\n    d3.csv("/data", function (data_p) {\n      data = data_p;\n      console.log("|data|", data.length);\n      var x = d3.scaleLinear().domain([-20, 20]).range([0, width]);\n      var y = d3.scaleLinear().domain([-20, 20]).range([height, 0]);\n\n      addDots(data, x, y, color_by, transform, width, height);\n      //addTimeline(data, transform, width, height);\n\n      //addImages(data, x, y);\n\n      zoom = d3\n        .zoom()\n        .filter(function filter(event) {\n          return !d3.event.ctrlKey && !d3.event.button;\n        })\n        .on("zoom", handleZoom)\n        .on("end", function () {\n          zoomControl(true);\n        });\n\n      function handleZoom(e) {\n        transform = d3.zoomTransform(this);\n        // console.log("handleZoom", transform);\n        // console.log(this);\n        g.attr("transform", transform);\n        zoomControl(false);\n      }\n\n      function zoomControl(updatePrev) {\n        // console.log("zoomControl");\n        if (!transform) {\n          return null;\n        }\n        // alert("here");\n\n        const now = new Date().getTime() / 1000;\n        if (now - lastZoomUpdate > 0.1) {\n          // if (translation > 3.0 || transform.k != prevTransform.k) {\n          if (numUpdatesActive == 0) {\n            numUpdatesActive++;\n            setTimeout(function () {\n              d3.select("#dots").remove();\n              addDots(data, x, y, color_by, transform, width, height);\n              clearImages();\n              addImages(data, x, y, transform, width, height);\n              lastZoomUpdate = now;\n              numUpdatesActive--;\n              console.log(\n                "update took",\n                new Date().getTime() / 1000 - now,\n                numUpdatesActive\n              );\n            }, 0);\n          }\n        } else {\n          console.log("too fast");\n        }\n\n        if (updatePrev) {\n          prevTransform = transform;\n        }\n      }\n\n      function initZoom() {\n        d3.select("svg").call(zoom);\n      }\n\n      initZoom();\n\n      let coords = [];\n      const lineGenerator = d3.line();\n\n      const pointInPolygon = function (point, vs) {\n        // console.log(point, vs);\n        // ray-casting algorithm based on\n        // https://wrf.ecse.rpi.edu/Research/Short_Notes/pnpoly.html/pnpoly.html\n\n        var x = point[0],\n          y = point[1];\n\n        var inside = false;\n        for (var i = 0, j = vs.length - 1; i < vs.length; j = i++) {\n          var xi = vs[i][0],\n            yi = vs[i][1];\n          var xj = vs[j][0],\n            yj = vs[j][1];\n\n          var intersect =\n            yi > y != yj > y && x < ((xj - xi) * (y - yi)) / (yj - yi) + xi;\n          if (intersect) inside = !inside;\n        }\n\n        return inside;\n      };\n\n      function drawPath() {\n        d3.select("#lasso")\n          .style("stroke", "white")\n          .style("stroke-width", 2)\n          .style("fill", "#00000054")\n          .attr("d", lineGenerator(coords));\n      }\n\n      function dragStart() {\n        console.log("dragStart");\n        coords = [];\n        dots.attr("fill", "steelblue");\n        d3.select("#lasso").remove();\n        d3.select("#my_dataviz g").append("path").attr("id", "lasso");\n      }\n\n      function dragMove(event) {\n        let mouseX = d3.event.x;\n        let mouseY = d3.event.y;\n        let k = 1;\n        let Tx = 1;\n        let Ty = 1;\n        if (transform !== undefined && transform) {\n          k = transform.k;\n          Tx = transform.x;\n          Ty = transform.y;\n        }\n        mouseX = (mouseX - Tx) / k;\n        mouseY = (mouseY - Ty) / k;\n        coords.push([mouseX, mouseY]);\n        drawPath();\n      }\n\n      function dragEnd() {\n        let selectedDots = [];\n        dots.each((d, i) => {\n          let point = [x(d.e_0), y(d.e_1)];\n          if (pointInPolygon(point, coords)) {\n            d3.select("#dot-" + d.uid).attr("fill", "red");\n            selectedDots.push(d.uid);\n          }\n        });\n        // console.log(`select: ${selectedDots}`);\n        //\n        let show_data = [];\n        for (const d of data) {\n          if (selectedDots.includes(d.uid)) {\n            show_data.push(d);\n          }\n        }\n        drawGallery(show_data);\n      }\n      // auto suggestion\n      let as_ranking_column = urlParams.get("as_ranking_column");\n      console.log("as_ranking_column", as_ranking_column);\n      if (as_ranking_column == null) {\n        as_ranking_column = "most_needed";\n      }\n      let show_labeled = urlParams.get("show_labeled");\n      if (show_labeled == null) {\n        show_labeled = "unlabeled";\n      }\n      let show_data2 = [];\n      let show_data_test = [];\n      if (as_ranking_column == "score_true") {\n        show_labeled = "labeled";\n      }\n      let [show_data_start, tmp_] = filterData(\n        data,\n        data.length,\n        transform,\n        width,\n        height\n      );\n      let num_in_gallery = urlParams.get("num_in_gallery");\n      if (num_in_gallery == null) {\n        num_in_gallery = 10;\n      }\n      // console.log("foekoezoe", show_data_start);\n      if (\n        as_ranking_column == "score_predicted" ||\n        as_ranking_column == "score_true" ||\n        as_ranking_column == "fre" ||\n        as_ranking_column == "most_needed" ||\n        as_ranking_column == "incorrect_score" ||\n        as_ranking_column == "certain_incorrect"\n      ) {\n        show_data2 = show_data_start.filter(\n          (row) => row.labeled == (show_labeled == "unlabeled" ? 0 : 1) //&& row.in_test == 1\n        );\n        if (show_labeled == "labeled") {\n          console.log(\n            "ignore_double_checked",\n            urlParams.get("ignore_double_checked")\n          );\n          show_data2 = show_data2.filter(\n            (row) =>\n              row.double_checked == 0 ||\n              row.label_undetermined.length > 0 ||\n              urlParams.get("ignore_double_checked") == "on"\n          );\n        }\n        const rank_modifier = urlParams.get("invert_ranking") == "on" ? -1 : +1;\n        show_data2 = show_data2.sort(\n          (a, b) =>\n            rank_modifier * (a[as_ranking_column] - b[as_ranking_column])\n        );\n        show_data2 = show_data2.slice(\n          0,\n          show_labeled == "unlabeled" ? num_in_gallery - 1 : num_in_gallery\n        );\n        console.log("show_data2", show_data2);\n      } else if (as_ranking_column == "high_label_entropy") {\n        for (const row of data) {\n          if (row.al_measure == 0 && row.in_test == 0) {\n            show_data2.push(row);\n          }\n        }\n      }\n      if (show_labeled == "unlabeled") {\n        for (const row of data) {\n          if (row.in_test == 1 && row.labeled == 0) {\n            show_data_test.push(row);\n          }\n        }\n        console.log(show_data2.length, "show_data2");\n        console.log(\n          show_data_test.length,\n          "show_data_test",\n          Math.ceil(0.1 * show_data2.length)\n        );\n        show_data_test = _.sample(\n          show_data_test,\n          Math.ceil(0.1 * show_data2.length)\n        );\n        console.log(show_data_test.length, "show_data_test");\n        if (as_ranking_column != "score_true") {\n          for (const row of show_data_test) {\n            console.log("test", row.uid);\n            show_data2.push(row);\n          }\n        }\n      }\n      for (const row of show_data2) {\n        d3.select("#dot-" + row.uid)\n          .style("stroke", "#ff0000")\n          .style("stroke-width", 2);\n      }\n      // TODO: skip the above logic when labeled is in local storage\n      console.log("oegma", localStorage.getItem("labeled"));\n      if (localStorage.getItem("labeled")) {\n        const labelsFromStorage = JSON.parse(localStorage.getItem("labeled"));\n        const uidsFromStorage = Object.keys(labelsFromStorage);\n        let numRestored = 0;\n        show_data2 = new Array();\n        for (const row of data) {\n          if (uidsFromStorage.indexOf(row.uid) > -1) {\n            numRestored++;\n            show_data2.push(row);\n          }\n        }\n        logUI(`Restored ${numRestored} labeled UIDs from local storage`, 1);\n      }\n      //\n      drawGallery(show_data2);\n      console.log(show_data2.length, "show_data2");\n      //\n\n      const drag = d3\n        .drag()\n        .filter(function filter(event) {\n          return d3.event.ctrlKey && !d3.event.button;\n        })\n        .on("start", dragStart)\n        .on("drag", dragMove)\n        .on("end", dragEnd);\n\n      d3.select("#my_dataviz").call(drag);\n\n      $("body").on("keypress", function (eventData) {\n        const key = eventData.originalEvent.key;\n        if (key == "?") {\n          // alert("gg");\n          $("#help").toggle();\n        }\n      });\n    });\n  });\n</script>'
PASSED
annflux/tests/test_server.py::test_refresh here
successfully committed afe7a9ce82f5e2835df0dd66c47ec7e10e25bc294859d3592a9755cd
Initialized AnnFlux in folder /home/lhogeweg/annflux/data/bombus-plant-test/annflux
successfully committed 2c1493db681321643937047c65b5df403141e91fb56ca859085ff510
INFO
logger=<RootLogger root (INFO)>
Using project_root=/home/lhogeweg/annflux/data/bombus-plant-test, images_path =/home/lhogeweg/annflux/data/bombus-plant-test/images
/label: logger=<RootLogger root (INFO)>
instant_reclassification 2 0.004962921142578125
instant_reclassification 3 1750041734.931485
version_for_recompute None 2c1493db681321643937047c65b5df403141e91fb56ca859085ff510 None
500 500
|pseudolabel_uids| 0
instant_reclassification 4 0.0063304901123046875
set(annotations.values()) 0 set()
state.label_array_test [None None None None None None None None None None None None None None
 None None None None None None None None None None None None None None
 None None None None None None None None None None None None None None
 None None None None None None None None None None None None None None
 None None None None None None None None None None None None None None
 None None None None None None None None None None None None None None
 None None None None None None None None None None None None None None
 None None None None None None None None None None None None None None
 None None None None None None None None None None None None None None
 None None None None None None None None None None None None None None
 None None None None None None None None None None None None None None
 None None None None None None None None None None None None None None
 None None None None None None None None None None None None None None
 None None None None None None None None None None None None None None
 None None None None None None None None None None None None None None
 None None None None None None None None None None None None None None
 None None None None None None None None None None None None None None
 None None None None None None None None None None None None None None
 None None None None None None None None None None None None None None
 None None None None None None None None None None None None None None
 None None None None None None None None None None None None None None
 None None None None None None None None None None None None None None
 None None None None None None None None None None None None None None
 None None None None None None None None None None None None None None
 None None None None None None None None None None None None None None
 None None None None None None None None None None None None None None
 None None None None None None None None None None None None None None
 None None None None None None None None None None None None None None
 None None None None None None None None None None None None None None
 None None None None None None None None None None None None None None
 None None None None None None None None None None None None None None
 None None None None None None None None None None None None None None
 None None None None None None None None None None None None None None
 None None None None None None None None None None None None None None
 None None None None None None None None None None None None None None
 None None None None None None None None None None]
|label_array_test| 500
|test_uids| 50
|test_indices| 50
|labeled_test_indices| 0
instant_reclassification 5 0.009145021438598633
(500, 512)
knn labeled 4.0531158447265625e-06
0 0 500
tmp_counter 0
prev_near_labeled_perc -1.0
0 0 500
tmp_counter 0
|predicted_test| 0
make_predictions end 1750041734.9809384
no prediction 394
instant_reclassification done
b'{"success":true}\n'
PASSED
annflux/tests/test_train.py::TestTrain::test_train successfully committed afe7a9ce82f5e2835df0dd66c47ec7e10e25bc294859d3592a9755cd
Train set size: 405
Val set size: 50
Sample input_ids shape  torch.Size([50, 5])
Sample attention_mask shape  torch.Size([50, 5])
Sample pixel_values shape  torch.Size([50, 3, 224, 224])
Sample caption shape  (50,)
trainable params: 983040 || all params: 24429057 || trainable%: 4.02
len(data_train) 405
Training complete in 0m 49s
perf 0.94
0.94
PASSED

=============================== warnings summary ===============================
../../../miniconda3/envs/annflux2/lib/python3.11/site-packages/faiss/loader.py:49
  /home/lhogeweg/miniconda3/envs/annflux2/lib/python3.11/site-packages/faiss/loader.py:49: DeprecationWarning: numpy.core._multiarray_umath is deprecated and has been renamed to numpy._core._multiarray_umath. The numpy._core namespace contains private NumPy internals and its use is discouraged, as NumPy internals can change without warning in any release. In practice, most real-world usage of numpy.core is to access functionality in the public NumPy API. If that is the case, use the public NumPy API. If not, you are using NumPy internals. If you would still like to access an internal attribute, use numpy._core._multiarray_umath.__cpu_features__.
    from numpy.core._multiarray_umath import __cpu_features__

<frozen importlib.util>:262
  <frozen importlib.util>:262: DeprecationWarning: The `openvino.runtime` module is deprecated and will be removed in the 2026.0 release. Please replace `openvino.runtime` with `openvino`.

src/annflux/tests/test_cli.py::TestCli::test_cli
src/annflux/tests/test_cli.py::TestCli::test_cli
src/annflux/tests/test_server.py::test_index
src/annflux/tests/test_server.py::test_refresh
  /home/lhogeweg/miniconda3/envs/annflux2/lib/python3.11/site-packages/transformers/models/clip/modeling_clip.py:243: TracerWarning: Converting a tensor to a Python boolean might cause the trace to be incorrect. We can't record the data flow of Python values, so this value will be treated as a constant in the future. This means that the trace might not generalize to other inputs!
    if not interpolate_pos_encoding and (height != self.image_size or width != self.image_size):

src/annflux/tests/test_cli.py::TestCli::test_cli
src/annflux/tests/test_server.py::test_index
src/annflux/tests/test_server.py::test_refresh
  /home/lhogeweg/miniconda3/envs/annflux2/lib/python3.11/site-packages/sklearn/utils/deprecation.py:151: FutureWarning: 'force_all_finite' was renamed to 'ensure_all_finite' in 1.6 and will be removed in 1.8.
    warnings.warn(

src/annflux/tests/test_server.py::test_refresh
  /home/lhogeweg/Documents/annflux_oe/src/annflux/algorithms/feature_reconstruction_error.py:74: ChainedAssignmentError: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.
  When using the Copy-on-Write mode, such inplace method never works to update the original DataFrame or Series, because the intermediate object on which we are setting values always behaves as a copy.
  
  For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' instead, to perform the operation inplace on the original object.
  
  
    data[column_name].fillna(0, inplace=True)

src/annflux/tests/test_server.py::test_refresh
  /home/lhogeweg/Documents/annflux_oe/src/annflux/algorithms/feature_reconstruction_error.py:74: FutureWarning: Downcasting object dtype arrays on .fillna, .ffill, .bfill is deprecated and will change in a future version. Call result.infer_objects(copy=False) instead. To opt-in to the future behavior, set `pd.set_option('future.no_silent_downcasting', True)`
    data[column_name].fillna(0, inplace=True)

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
================================ tests coverage ================================
_______________ coverage: platform linux, python 3.11.11-final-0 _______________

Name                                                 Stmts   Miss  Cover
------------------------------------------------------------------------
/tmp/tmpajh3fp80/_remote_module_non_scriptable.py       39     27    31%
__init__.py                                              0      0   100%
annflux/__init__.py                                      0      0   100%
annflux/algorithms/__init__.py                           0      0   100%
annflux/algorithms/embeddings.py                        20      3    85%
annflux/algorithms/feature_reconstruction_error.py      45     15    67%
annflux/algorithms/most_needed.py                       51      3    94%
annflux/data/__init__.py                                 0      0   100%
annflux/data/bombus_plant_test/__init__.py               0      0   100%
annflux/data/bombus_plant_test/data.py                  34      2    94%
annflux/data/envdataset/__init__.py                      0      0   100%
annflux/data/envdataset/data.py                         39     15    62%
annflux/performance/__init__.py                          0      0   100%
annflux/performance/basic.py                            68     26    62%
annflux/repo_results_to_embedding.py                    64     11    83%
annflux/repository/__init__.py                           0      0   100%
annflux/repository/dataset.py                           65     17    74%
annflux/repository/model.py                             99     50    49%
annflux/repository/repository.py                       161     50    69%
annflux/repository/resultset.py                         94     36    62%
annflux/scripts/__init__.py                              0      0   100%
annflux/scripts/annflux_cli.py                          59      4    93%
annflux/scripts/run_tests.py                            59     20    66%
annflux/shared.py                                       45      1    98%
annflux/tests/__init__.py                                0      0   100%
annflux/tests/test_cli.py                                5      0   100%
annflux/tests/test_server.py                            43      1    98%
annflux/tests/test_train.py                             27      0   100%
annflux/tools/__init__.py                                0      0   100%
annflux/tools/core.py                                   57      2    96%
annflux/tools/data.py                                  100     30    70%
annflux/tools/io.py                                     64     27    58%
annflux/tools/mixed.py                                  54     14    74%
annflux/train_indeed_image.py                          208     90    57%
annflux/training/__init__.py                             0      0   100%
annflux/training/annflux/__init__.py                     0      0   100%
annflux/training/annflux/clip.py                       242     24    90%
annflux/training/annflux/clip_shared.py                 69      4    94%
annflux/training/annflux/feature_extractor.py           41      7    83%
annflux/training/annflux/quick.py                      242     92    62%
annflux/training/tensorflow/__init__.py                  0      0   100%
annflux/training/tensorflow/tf_backend.py               73     52    29%
annflux/ui/__init__.py                                   0      0   100%
annflux/ui/basic/__init__.py                             0      0   100%
annflux/ui/basic/run_server.py                         280    151    46%
------------------------------------------------------------------------
TOTAL                                                 2447    774    68%
================== 4 passed, 11 warnings in 192.84s (0:03:12) ==================
